---
- name: Bootstrap a web app application using Azure collection
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars/main.yml

  tasks:
    - name: Fail when azure_resource_group is not defined
      ansible.builtin.fail:
        msg: Azure Resource group must be defined as azure_resource_group
      when: azure_resource_group is not defined

    - name: Create application infrastructure
      ansible.builtin.import_role:
        name: scale_virtual_machine

    - name: Create the database instance
      when: operation | default('create') == 'create'
      block:
        - name: Retrieve PostgreSQL Server info
          azure.azcollection.azure_rm_postgresqlserver_info:
            resource_group: "{{ azure_resource_group }}"
            name: "{{ azure_postgresql_name }}"
          register: _server

        - name: Create PostgreSQL database instance
          ansible.builtin.import_role:
            name: cloud.azure_ops.azure_manage_postgresql
          when: _server.servers | length == 0

- name: Deploy resource from Bastion Host
  hosts: bastion
  gather_facts: false

  vars:
    ansible_venv_path: ~/venv
    application_data: /tmp/controller
    application_image: controller-image
    application_container: controller-container
    application_config: /tmp/controller/config.txt

  vars_files:
    - vars/main.yml

  tasks:
    - name: Update ssh_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regex: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - regex: ^(# *)?ClientAliveInterval
          line: ClientAliveInterval  1200
        - regex: ^(# *)?ClientAliveCountMax
          line: ClientAliveCountMax 3
      become: true

    - name: Ensure python3 is installed
      ansible.builtin.yum:
        name:
          - python3
          - python3-virtualenv
          - sshpass
          - git
        state: present
      become: true

    - name: Create virtualenv
      ansible.builtin.pip:
        virtualenv: "{{ ansible_venv_path }}"
        virtualenv_python: python3
        name: ansible
        state: latest
        update_only: true

    - name: Create application directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      with_items:
        - "{{ ansible_venv_path }}/playbook"
        - "{{ ansible_venv_path }}/playbook/tasks"

    - name: Create inventory file
      ansible.builtin.template:
        src: workers.j2
        dest: "{{ ansible_venv_path }}/playbook/inventory.yaml"
        mode: "0644"
      register: inv_result

    - name: Create vars file
      ansible.builtin.template:
        src: application-data.j2
        dest: "{{ ansible_venv_path }}/playbook/vars.yaml"
        mode: "0644"
      register: vars_result

    - name: Copy playbook file
      ansible.builtin.copy:
        src: deploy-app.yml
        dest: "{{ ansible_venv_path }}/playbook/play.yaml"
        mode: "0644"
      register: play_result

    - name: Git clone ensure-docker role # noqa latest
      ansible.builtin.git:
        repo: https://opendev.org/zuul/zuul-jobs.git
        dest: "{{ ansible_venv_path }}/playbook/zuul-jobs"
      register: git_result

    - name: Deploy application # noqa no-handler
      when: inv_result.changed or vars_result.changed or play_result.changed or git_result.changed
      ansible.builtin.shell: source {{ ansible_venv_path }}/bin/activate; ansible-playbook play.yaml -i inventory.yaml -e '@vars.yaml' -v -f {{ playbook_number_forks
        }}
      environment:
        ANSIBLE_ROLES_PATH: "{{ ansible_venv_path }}/playbook/zuul-jobs/roles"
      args:
        chdir: "{{ ansible_venv_path }}/playbook"
      changed_when: false

- name: Show web application URL
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Print web application URL
      ansible.builtin.debug:
        msg: Web application accessible at  http://{{ load_balancer_public_ip }}:5000
      when: load_balancer_public_ip is defined
